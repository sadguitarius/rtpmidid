/**
 * Real Time Protocol Music Instrument Digital Interface Daemon
 * Copyright (C) 2019-2021 David Moreno Montero <dmoreno@coralbits.com>
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <https://www.gnu.org/licenses/>.
 */

#pragma once
#include <fmt/format.h>
#include <jack/jack.h>
#include <jack/midiport.h>
#include <jack/ringbuffer.h>
#include <string>

#include <mididata.hpp>
#include <rtpmidid/iobytes.hpp>
#include <rtpmidid/poller.hpp>
#include <rtpmidid/signal.hpp>

namespace rtpmididns {
class jack_t : public std::enable_shared_from_this<jack_t> {
  NON_COPYABLE_NOR_MOVABLE(jack_t)
public:
  struct port_t {
    std::string client;
    std::string port;

    // port_t(std::string &a, std::string &b) : client(a), port(b) {}

    bool operator<(const port_t &other) const {
      return client < other.client && port < other.port;
    }

    bool operator==(const port_t &other) const {
      return client == other.client && port == other.port;
    }

    std::string to_string() const {
      return fmt::format("port_t[{}, {}]", client, port);
    }
  };

  struct connection_t {
    std::shared_ptr<jack_t> jack;
    port_t from;
    port_t to;
    bool connected = false;

    // NOLINTNEXTLINE
    connection_t(const std::shared_ptr<jack_t> &jack_, const port_t &from_,
                 const port_t &to_)
        : jack(jack_), from(from_), to(to_) {};
    connection_t(const connection_t &other) = delete;
    connection_t(connection_t &&other) noexcept
        : jack(other.jack), from(other.from), to(other.to) {
      other.from = {"default", "default"};
      other.to = {"default", "default"};
      other.connected = false;
    };
    connection_t &operator=(const connection_t &other) = delete;
    connection_t &operator=(connection_t &&other) noexcept {
      jack = other.jack;
      from = other.from;
      to = other.to;
      connected = other.connected;
      other.from = {0, 0};
      other.to = {0, 0};
      other.connected = false;
      return *this;
    }
    void disconnect() {
      if (connected)
        jack->disconnect(from, to);
      connected = false;
    }
    // NOLINTNEXTLINE
    ~connection_t() { disconnect(); }
  };

  enum client_type_e {
    TYPE_HARDWARE,
    TYPE_SOFTWARE,
    TYPE_SYSTEM, // generated by ALSA, announcements and such. Not really for
                 // exports.
  };

  struct port_data_t {
    jack_port_t *in_port{};
    jack_port_t *out_port{};
    std::string name{};
    jack_ringbuffer_t *size_buffer{};
    jack_ringbuffer_t *in_buffer{};
  };

  std::string name;
  jack_client_t *client;
  static const constexpr auto ringbuffer_size = 16384;
  std::map<std::string, port_data_t> ports;
  std::map<std::string, rtpmidid::signal_t<port_t, const std::string &>>
      subscribe_event;
  std::map<std::string, rtpmidid::signal_t<port_t>> unsubscribe_event;
  std::map<std::string, rtpmidid::signal_t<jack_midi_event_t *>> midi_event;
  std::vector<rtpmidid::poller_t::listener_t> jack_listener;
  rtpmidid::signal_t<const std::string &, jack_t::client_type_e, const port_t &>
      added_port_announcement;
  rtpmidid::signal_t<const port_t &> removed_port_announcement;

  jack_t(std::string name);
  ~jack_t();

  void read_ready();

  uint8_t create_port(const std::string &name, bool do_export = true);
  void remove_port(const std::string &name);

  /// Connect two ports
  connection_t connect(const port_t &from, const port_t &to);
  void disconnect(const port_t &from, const port_t &to);
  /// Disconnects everything from this port
  void disconnect_port(const std::string &port);

  std::vector<std::string> get_ports(jack_t *);
};

/**
 * @short This class allows to feed midi data and loops over the given function
 *
 * As the midi data can be partial, it keeps some state to allow several calls
 * Its just a intermediary to alsa functions
 */
class mididata_to_jackevents_t {
  NON_COPYABLE_NOR_MOVABLE(mididata_to_jackevents_t)
public:
  jack_midi_event_t *buffer;
  mididata_to_jackevents_t();
  ~mididata_to_jackevents_t();

  // Gets a data bunch of bytes, and calls a callback with all found events.
  void mididata_to_evs_f(rtpmidid::io_bytes_reader &data,
                         std::function<void(jack_midi_event_t *)>);

  void ev_to_mididata_f(jack_midi_event_t *ev, rtpmidid::io_bytes_writer &data,
                        std::function<void(const mididata_t &)> func);

private:
  std::vector<uint8_t> decode_buffer_data;
  rtpmidid::io_bytes decode_buffer;
};

class jack_connect_exception : public rtpmidid::exception {
public:
  jack_connect_exception(const std::string &msg) : rtpmidid::exception(msg) {}
};

} // namespace rtpmididns

// TODO: is this necessary?
// namespace std {
// template <> struct hash<rtpmididns::jack_t::port_t> {
//   size_t operator()(const rtpmididns::jack_t::port_t &key) const {
//     return (key.client << 8) + key.port;
//   }
// };
// } // namespace std

template <>
struct fmt::formatter<rtpmididns::jack_t::port_t>
    : formatter<fmt::string_view> {
  fmt::appender format(rtpmididns::jack_t::port_t c, format_context &ctx) const;
};

template <>
struct fmt::formatter<rtpmididns::jack_t::client_type_e>
    : formatter<fmt::string_view> {
  fmt::appender format(rtpmididns::jack_t::client_type_e c,
                       format_context &ctx) const;
};

template <>
struct fmt::formatter<rtpmididns::jack_t::connection_t>
    : formatter<fmt::string_view> {
  fmt::appender format(const rtpmididns::jack_t::connection_t &c,
                       format_context &ctx) const;
};

// TODO: is this necessary?
// const char *format_as(const snd_seq_event_type type);
